JAVASCRIPT

o que , porque , e como

caminho critico

por regra os scripts dos javascript sao colocados no final do condigo antes de /body e a ordem influencia
renderizacao de caminho critico.

Expressoes Regulares.

prototypes usar em aquivo separado.

antes de entrar no setInterval salvar a posicao do this em uma variavel.

arrow function tem this lexico ou seja pega o this do campo mais proximo.

typeof variavel -> retorna o tipo de valor dentro da variavel.
shadowcopy--> faz uma copia somente dos atributos e nao copia os objetos internos
deepcopy --> copia recursiva copia todos valores inclusive objetos.
=== --> utilizado para comparar valores de variaveis(outras comparacoes seguem a mesma logica)
parse --> utilizado para conversao de valores de uma variavel.
console.log --> imprime valores no console do javascript
alert -> gera um pop-up na tela
is
-------------------------------------- funcoes -------------------------------------------------
cuidado na hora de declarar funcao.
transpiler-> transforma arrowfunctions em funcoes normais.

nao precisa declarar argumentos na funcao pois os valores ficam armazenados num array arguments,
basta informar ex.: a=arguments[0] b=arguments[1]

isNaN(undefined + undefined) --> verifica se nao e um numero

array().join() -> junta os valores dentro do array

3 tipos de escopo, global, funcao e de bloco.

for( var funcoes of funcoes) ----> foreach

for(var funcao in funcoes)----> retorna o indice do array, ele percorre as propriedades de um objeto.

arrays sao objetos com uma propriedade chamada length

date = new date() -> funcao que busca dados do sistema. (date.getDate, date.Day, date.getMonth) no dia da semana e no mes o primerio valor e a posicao 0.



------------------------------------- functions ----------------------------------------------


array.filter(funcao) --> faz um filtro para cada item do array retornando o elemento caso a condicao seja verdadeira obs: filter retorna o objeto

array.map(funcao) --> para cada item do array ele verifica e retorna se o item em questao e verdadeiro ou falso. obs: map retorna o valor.

array.sort(funcao) --> caso o resultado da condicao da funcao seja verdadeiro move o numero. ex.: numerors.sort((a,b) => a>b) isto orderna um vetor.

array.concat(array2) -- > concatena os itens do array com os itens do array2.

array.reduce((acumulador ,arrayIten) => funcao, tipo de dados de saida) --> para cada arrayIten executa a funcao vai para o acumulador. obs.: o tipo de funcao e o tipo de valor que vai retornar tipo 0 retorna numeros  e "" retornar String.

indexOf --> faz busca no array comparando o valor passado com o contigo e caso tenha valor igual

every() --> retorna true ou false se todos os valores dentro do array respeitarem os criterios.

some()--> verifica se tem o valor dentro do objeto, array.

trim() -->

find() --> faz a mesma coisa que o filter.

match(/expressao regular/g) --|--> adiciona expressoes regulareso /g faz uma busca global.
           |                  |
search(/expressao regular/g)--|

replace(/expressao regular/g, "novo valor ")--> faz a troca na string do resultado achado na expressao regular pelo novo valor.

object.assign({objetonovo}, objeto a ser copiado) --> retorna a copia de um objeto

bind(this) --> adicionado depois do fechamento da funcao e ele manten o valor de this(em arrow function nao precisa).

fetch(url) --> faz uma consulta na url especificada.

//
